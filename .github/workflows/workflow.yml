# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

name: Conversion App CI/CD
run-name: ${{ github.actor }}
on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:

permissions:
  pull-requests: read # allows SonarQube to decorate PRs with analysis results

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      JAVA_VERSION: "11"
      JAVA_DISTRIBUTION: "temurin"

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          cache: maven
      - name: List Contents of Directory
        run: ls -R ChallengePackage/devops-project

      - name: Build and Test with Maven
        run: |
          cd ChallengePackage/devops-project
          mvn -B package test

  Unit-Test:
    runs-on: ubuntu-latest
    env:
      JAVA_VERSION: "11"
      JAVA_DISTRIBUTION: "temurin"
    needs: [build]
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}
      - name: Run Maven Unit Tests
        run: |
          cd ChallengePackage/devops-project
          mvn test

  Integration-Test:
    runs-on: ubuntu-latest
    env:
      JAVA_VERSION: "11"
      JAVA_DISTRIBUTION: "temurin"
    needs: [build, Unit-Test]
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}
      - name: Run Maven Unit Tests
        run: |
          cd ChallengePackage/devops-project
          mvn verify -DskipUnitTests

  Sonarqube-Static-Code-Analysis:
    runs-on: ubuntu-latest
    env:
      JAVA_VERSION: "11"
      JAVA_DISTRIBUTION: "temurin"
    needs: [build, Unit-Test, Integration-Test]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}
      - name: Cache SonarQube packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build and analyze
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        working-directory: ${{ github.workspace }}/ChallengePackage/devops-project
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=WeatherApp-CI-CD -Dsonar.projectName='WeatherApp-CI-CD'

  sonarqube-quality-gate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Analyze with SonarQube
        uses: sonarsource/sonarqube-scan-action@master
        with:
          sonar-token: ${{ secrets.SONAR_TOKEN }}
          sonar-url: ${{ secrets.SONAR_HOST_URL }}
          project-key: WeatherApp-CI-CD # Replace with your project key

      - name: Wait for analysis to complete
        run: sleep 20s # Adjust the wait time as needed to allow SonarQube analysis to complete

      - name: Check SonarQube Quality Gate status
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        with:
          project-key: WeatherApp-CI-CD # Replace with your project key
          sonar-token: ${{ secrets.SONAR_TOKEN }}
          sonar-url: ${{ secrets.SONAR_HOST_URL }}

      - name: Display SonarQube Quality Gate status
        run: |
          echo "SonarQube Quality Gate status: ${{ steps.sonarqube-quality-gate-check.outputs.status }}"
