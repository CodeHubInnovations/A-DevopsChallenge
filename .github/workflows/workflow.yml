# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
name: Conversion App CI/CD
run-name: ${{ github.actor }}
on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:

permissions:
  pull-requests: read # allows SonarQube to decorate PRs with analysis results
  contents: read

env:
  AWS_REGION: MY_REGION
  ECR_REPOSITORY: java-app
  ECS_SERVICE: dev-cluster-service
  ECS_CLUSTER: devcluster
  ECS_TASK_DEFINITION: task_definition.json
  CONTAINER_NAME: java-app
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      JAVA_VERSION: "11"
      JAVA_DISTRIBUTION: "temurin"

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          cache: maven
      - name: List Contents of Directory
        run: ls -R ChallengePackage/devops-project

      - name: Build and Test with Maven
        run: |
          cd ChallengePackage/devops-project
          mvn -B package test

      - name: Run Maven Unit Tests
        run: |
          cd ChallengePackage/devops-project
          mvn test

      - name: Integration-Test
        run: |
          cd ChallengePackage/devops-project
          mvn verify -DskipUnitTests
      - name: Sonarqube-Static-Code-Analysis- Cache SonarQube packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Sonarqube-Static-Code-Analysis- Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build and analyze
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        working-directory: ${{ github.workspace }}/ChallengePackage/devops-project
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=WeatherApp-CI-CD -Dsonar.projectName='WeatherApp-CI-CD'
      - name: Maven-Build
        run: |
          cd ChallengePackage/devops-project
          mvn clean install

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
            # Enable debug output for Docker
          export DOCKER_BUILDKIT=1
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Run Trivy vulnerability scanner For ECR
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/java-app:${{ github.sha }}"
          format: "sarif"
          output: "trivy-results.sarif"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}

      - name: Docker-Build-Push
        uses: mr-smithers-excellent/docker-build-push@v6
        with:
          image: kevinlearningaccount/javaapp
          tags: v1, ${{ github.sha }}, latest
          registry: docker.io
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Run Trivy vulnerability scanner for Docker Image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "docker.io/kevinlearningaccount/javaapp:latest"
          format: "table"
          ignore-unfixed: true
          severity: "CRITICAL,HIGH"

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
