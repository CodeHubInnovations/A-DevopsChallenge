@Library('my-shared-library') _



pipeline{
    agent any

     environment {
        ECR_REGISTRY = "908459128553.dkr.ecr.us-east-1.amazonaws.com"
        APP_REPO_NAME= "java-app"
    }

    parameters{
        choice(name: 'action', choices: 'create\ndelete', description: 'Choose create/Destroy')
        string(name: 'ImageName', description: "Name of the docker build", defaultValue: 'javaapp')
        string(name: 'ImageTag', description: "Tag of the docker build", defaultValue: 'v1')
        string(name: 'DockerHubUser', description: "Name of the Application", defaultValue: 'kevinlearningaccount')

        string(name: 'aws_account_id', description: "AWS Account ID", defaultValue: '908459128553')
        string(name: 'Region', description: "Tag of the docker build", defaultValue: 'us-east-2')
        string(name: 'ECR_REPO_NAME', description: "Name of the Application", defaultValue: 'kevinlearningaccount')
    }

    stages{
        

        stage ('Git Checkout'){
         when {expression { params.action == 'create' }}
            steps{

                script{
                     gitCheckout(
                        branch: "main",
                        url: 'https://github.com/adegbolaA/A-DevopsChallenge.git'
                     )
                    
                 }

            }
           
        }

         stage ('Maven Unit Test'){
         when {expression { params.action == 'create' }}
            steps{

                script{
                     mvnTest()
              }

            }
           
        }

         stage ('Maven Integration Test'){
         when {expression { params.action == 'create' }}
            steps{

                script{
                     mvnIntegrationTest()
              }

            }
           
        }

        stage ('Static Code Analysis: Sonarqube'){
         when {expression { params.action == 'create' }}
            steps{

                script{
                    def SonarQubeCredentialsId = 'sonarqube-api'
                     staticCodeAnalysis(SonarQubeCredentialsId)
              }

            }
           
        }

        stage ('Quality Gate Status Check: Sonarqube'){
         when {expression { params.action == 'create' }}
            steps{

                script{
                    def SonarQubeCredentialsId = 'sonarqube-api'
                     QualityGateStatus(SonarQubeCredentialsId)
              }

            }
           
        }

        stage ('Maven Build'){
         when {expression { params.action == 'create' }}
            steps{

                script{
                    mvnBuild()
              }

            }
           
        }

        
        stage ('Docker Image Build: ECR'){
         when {expression { params.action == 'create' }}
            steps{

                script{
                    dockerBuildForECR("${params.aws_account_id}","${params.Region}","${params.ECR_REPO_NAME}")
              }

            }
           
        }

        stage ('Docker Image Scan ECR: Trivy'){
         when {expression { params.action == 'create' }}
            steps{

                script{
                    dockerImageScanForECR("${params.aws_account_id}","${params.Region}","${params.ECR_REPO_NAME}")
              }

            }
           
        }

        stage ('Docker Image Push: ECR'){
         when {expression { params.action == 'create' }}

         steps {

            withCredentials([[
                $class: 'AmzonWebServicesCredentialsBinding',
                credentialsId: 'aws-id',
                accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]){
                    sh 'aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin "$ECR_REGISTRY"'
                    sh 'docker push "$ECR_REGISTRY/$APP_REPO_NAME:latest"'
                }
            }
        
            // steps{

            //     script{
            //         dockerImagePushECR("${params.aws_account_id}","${params.Region}","${params.ECR_REPO_NAME}")
            //   }

            // }
           
        }

        //Image Cleanup
         stage ('Docker Image Cleanup: ECR'){
         when {expression { params.action == 'create' }}
            steps{

                script{
                    dockerImageECRCleanUp("${params.aws_account_id}","${params.Region}","${params.ECR_REPO_NAME}")
              }

            }
           
        }
      




















    }
}