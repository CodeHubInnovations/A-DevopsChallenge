@Library('my-shared-library') _



pipeline{
    agent any

    parameters{
        choice(name: 'action', choices: 'create\ndelete', description: 'Choose create/Destroy')
        string(name: 'ImageName', description: "Name of the docker build", defaultValue: 'javaapp')
        string(name: 'ImageTag', description: "Tag of the docker build", defaultValue: 'v1')
        string(name: 'DockerHubUser', description: "Name of the Application", defaultValue: 'kevinlearningaccount')

        string(name: 'aws_account_id', description: "AWS Account ID", defaultValue: '908459128553')
        string(name: 'Region', description: "Tag of the docker build", defaultValue: 'us-east-2')
        string(name: 'ECR_REPO_NAME', description: "Name of the Application", defaultValue: 'java-app')
        string(name: 'Cluster', description: "EKS Cluster Name", defaultValue: 'conversionapp-cluster') 
    }


    environment{
        ACCESS_KEY = credentials('AWS_ACCESS_KEY_ID')
        SECRET_KEY = credentials('AWS_SECRET_KEY_ID')
    }

    stages{
        

        stage ('Git Checkout'){
         when {expression { params.action == 'create' }}
            steps{

                script{
                     gitCheckout(
                        branch: "main",
                        url: 'https://github.com/adegbolaA/A-DevopsChallenge.git'
                     )
                    
                 }

            }
           
        }

         stage ('Maven Unit Test'){
         when {expression { params.action == 'create' }}
            steps{

                script{
                     mvnTest()
              }

            }
           
        }

         stage ('Maven Integration Test'){
         when {expression { params.action == 'create' }}
            steps{

                script{
                     mvnIntegrationTest()
              }

            }
           
        }

        stage ('Static Code Analysis: Sonarqube'){
         when {expression { params.action == 'create' }}
            steps{

                script{
                    def SonarQubeCredentialsId = 'sonarqube-api'
                     staticCodeAnalysis(SonarQubeCredentialsId)
              }

            }
           
        }

        stage ('Quality Gate Status Check: Sonarqube'){
         when {expression { params.action == 'create' }}
            steps{

                script{
                    def SonarQubeCredentialsId = 'sonarqube-api'
                     QualityGateStatus(SonarQubeCredentialsId)
              }

            }
           
        }

        stage ('Maven Build'){
         when {expression { params.action == 'create' }}
            steps{

                script{
                    mvnBuild()
              }

            }
           
        }

        
        stage ('Docker Image Build: ECR'){
         when {expression { params.action == 'create' }}
            steps{

                script{
                    dockerBuildForECR("${params.aws_account_id}","${params.Region}","${params.ECR_REPO_NAME}")
              }

            }
           
        }

        stage ('Docker Image Scan ECR: Trivy'){
         when {expression { params.action == 'create' }}
            steps{

                script{
                    dockerImageScanForECR("${params.aws_account_id}","${params.Region}","${params.ECR_REPO_NAME}")
              }

            }
           
        }

        stage ('Docker Image Push: ECR'){
         when {expression { params.action == 'create' }}

 
        
            steps{

                script{
                    dockerImagePushECR("${params.aws_account_id}","${params.Region}","${params.ECR_REPO_NAME}")
              }

            }
           
        }

        //Image Cleanup
         stage ('Docker Image Cleanup: ECR'){
         when {expression { params.action == 'create' }}
            steps{

                script{
                    dockerImageECRCleanUp("${params.aws_account_id}","${params.Region}","${params.ECR_REPO_NAME}")
              }

            }
           
        }
      

        stage ('EKS Cluster Creation: Terraform'){
         when {expression { params.action == 'create' }}
            steps{

                script{
                    dir('eks_module'){
                        sh """
                            terraform init
                            terraform plan -var 'access_key=$ACCESS_KEY' -var 'secret_key=$SECRET_KEY' -var 'region=${params.Region}' --var-file=./config/terraform.tfvars
                            terraform apply -var 'access_key=$ACCESS_KEY' -var 'secret_key=$SECRET_KEY' -var 'region=${params.Region}' --var-file=./config/terraform.tfvars --auto-approve 
                        """
                    }
              }

            }
           
        }


        stage ('Connection to EKS'){
         when {expression { params.action == 'create' }}
            steps{

                script{
                    sh """
                        aws configure set aws_access_key_id $ACCESS_KEY
                        aws configure set aws_secret_access_key $SECRET_KEY
                        aws configure set region ${params.Region}
                        aws eks --region ${params.Region} update-kubeconfig --name ${params.Cluster}
                    """
              }

            }
           
        } 
      




















    }
}